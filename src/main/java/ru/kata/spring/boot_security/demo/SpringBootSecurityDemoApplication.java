package ru.kata.spring.boot_security.demo;

import org.modelmapper.ModelMapper;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class SpringBootSecurityDemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootSecurityDemoApplication.class, args);
	}

	@Bean
	public ModelMapper modelMapper() {
		return new ModelMapper();
	}
}
/*
Задание:
1. Написать Rest-контроллеры для вашего приложения.
2. Переписать вывод (заполнение) таблицы, модальных окон и т.д. на JS c помощью Fetch API,
допускается использование JQuery.
3. При любых изменениях данных страница приложения не должна перезагружаться!

///////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Пишем REST контроллер (алишев, трегулов, смотрим какие аннотации нужны и что это вообще).
Используем POSTMAN для отправки REST запросов. Используем через postman bridge,
утилита подхватит куки с браузера и вы будете проходить авторизацию на автомате, либо отключаем секьюрность,
ниже в коментах описано как это сделать. Иначе вы не сможете отправить ни одного запроса.
Контроллер должен возвращать ResponseEntity, так правильней и лучше.

ЗЫ, морально готовимся, завариваем чай и читаем про очередного дикого зверя из мира кодинга,
которого нужно обуздать - AJAX

2. Поздравляю, вы написали самую лёгкую часть задания, а теперь начинаются танцы с бубном.
Вас посетил JavaScript и по началу это будет больно, но как въедете с какими объектами вам нужно взаимодействовать,
поймете, что Java и JavaScript  в общих чертах делают одно и тоже. Смысл в том, чтобы освоить базовый синтаксис,
правильно подключить jQuery и эта библиотека у вас работала (она сильно облегчает жизнь, минимизирует код)
и узнать как работает один метод - fetch(). https://learn.javascript.ru/fetch
Все, больше ничего не нужно.  Не используйте jQuery для ajax запросов, это лишние телодвижения,
JS умеет это из коробки.

Теперь подпункты:

2.1. learn.javasript.ru - ваш помощник. Оставляю какая нужна информация в порядке изучения.

- Основы JavaScript  - читаем про базовый синтаксис языка, как в нем создаются объекты, как выглядят массивы,
какие есть способы итерироваться. Ваша цель понять отличия JS от JAVA и делать все то же самое, а это вы умеете.
- Объекты: основы - тоже самое
- Промисы, async/await -  самая важная часть, здесь учимся работать с fetch(), на этом же сайте читаем про этот метод
- Браузер: документ, события, интерфейсы - еще более важная часть, изучите ее подробно,
здесь мы применяем JS к коду который написан у вас на HTML и учимся использовать DOM объекты,
по сути делать JS занимается тем, что получает HTML сущность в объектном виде и взаимодействует с ней,
на ходу меняя ее атрибуты и параметры. Все. Этого абсолютно достаточно для выполнения этого задания.

2.2. Гуглим что-то вроде "заполнение таблицы на JS" http://www.100byte.ru/stdntswrks/fftngs/fftngs.html
и делаем по аналогии с вашей таблицей. Начините с юзера, там проще, как поймете суть взаимодействия JS с DOM
дальше все будет очень легко, но вы будете ловить кучу ошибок, столкнетесь с кучей неправильно работающих скриптов,
проклянете все на свете (вы же бэкендер, а не вот это все, да?), но я в вас верю.

2.3. Формы делаем по аналогии, https://learn.javascript.ru/forms-controls - читаем тут,
https://doka.guide/js/deal-with-forms/ и тут

2.4. Вспоминаем про jQuery и в общих чертах узнаем, что для получения DOM вам нужно писать ровно в два раза меньше
кода, для обработки событий - в два раза меньше кода. Везде в два раза меньше кода. Сказка, а не жизнь!

Не благодарите. Потом встретимся сеньонрами, узнаем друг друга, купите мне пивко. Верю в вас, обнял!
 */
